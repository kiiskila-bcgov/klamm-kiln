# name: Build, Lint, Test, and Deploy

# on:
#   push:
#     branches:
#       - main
#       - test
#       - dev
#   workflow_dispatch:

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

# jobs:
#   lint:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout the repository
#         uses: actions/checkout@v4

#       - name: Install Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"

#       - name: Install dependencies
#         run: npm ci

#       - name: Run linter
#         run: npm run lint

#   build_for_e2e:
#     runs-on: ubuntu-latest
#     needs: lint

#     steps:
#       - name: Checkout the repository
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Extract metadata for Docker
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
#       - name: Export secrets based on environment
#         run: |
#           if [[ "${GITHUB_REF##*/}" == "main" ]]; then
#             echo "VITE_COMM_API_SAVEDATA_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_GENERATE_ENDPOINT_URL=${{ secrets.VITE_COMM_API_GENERATE_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_EDIT_ENDPOINT_URL=${{ secrets.VITE_COMM_API_EDIT_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_UNLOCK_ICM_FORM_URL=${{ secrets.VITE_COMM_API_UNLOCK_ICM_FORM_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_TEMPLATE_REPO_URL=${{ secrets.VITE_TEMPLATE_REPO_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_KLAMM_URL=${{ secrets.VITE_KLAMM_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REDIRECT_URI=${{ secrets.VITE_SSO_REDIRECT_URI_PROD }}" >> $GITHUB_ENV
#             echo "VITE_SSO_AUTH_SERVER_URL=${{ secrets.VITE_SSO_AUTH_SERVER_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REALM=${{ secrets.VITE_SSO_REALM_PROD }}" >> $GITHUB_ENV
#             echo "VITE_SSO_CLIENT_ID=${{ secrets.VITE_SSO_CLIENT_ID_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_API_PROXY_TARGET=${{ secrets.VITE_API_PROXY_TARGET_PROD_E2E }}" >> $GITHUB_ENV

#           elif [[ "${GITHUB_REF##*/}" == "test" ]]; then
#             echo "VITE_COMM_API_SAVEDATA_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_GENERATE_ENDPOINT_URL=${{ secrets.VITE_COMM_API_GENERATE_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_EDIT_ENDPOINT_URL=${{ secrets.VITE_COMM_API_EDIT_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_UNLOCK_ICM_FORM_URL=${{ secrets.VITE_COMM_API_UNLOCK_ICM_FORM_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_TEMPLATE_REPO_URL=${{ secrets.VITE_TEMPLATE_REPO_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_KLAMM_URL=${{ secrets.VITE_KLAMM_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REDIRECT_URI=${{ secrets.VITE_SSO_REDIRECT_URI_TEST }}" >> $GITHUB_ENV
#             echo "VITE_SSO_AUTH_SERVER_URL=${{ secrets.VITE_SSO_AUTH_SERVER_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REALM=${{ secrets.VITE_SSO_REALM_TEST }}" >> $GITHUB_ENV
#             echo "VITE_SSO_CLIENT_ID=${{ secrets.VITE_SSO_CLIENT_ID_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_API_PROXY_TARGET=${{ secrets.VITE_API_PROXY_TARGET_TEST_E2E }}" >> $GITHUB_ENV

#           else
#             echo "VITE_COMM_API_SAVEDATA_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_GENERATE_ENDPOINT_URL=${{ secrets.VITE_COMM_API_GENERATE_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_EDIT_ENDPOINT_URL=${{ secrets.VITE_COMM_API_EDIT_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_UNLOCK_ICM_FORM_URL=${{ secrets.VITE_COMM_API_UNLOCK_ICM_FORM_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_TEMPLATE_REPO_URL=${{ secrets.VITE_TEMPLATE_REPO_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_KLAMM_URL=${{ secrets.VITE_KLAMM_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REDIRECT_URI=${{ secrets.VITE_SSO_REDIRECT_URI_DEV }}" >> $GITHUB_ENV
#             echo "VITE_SSO_AUTH_SERVER_URL=${{ secrets.VITE_SSO_AUTH_SERVER_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REALM=${{ secrets.VITE_SSO_REALM_DEV }}" >> $GITHUB_ENV
#             echo "VITE_SSO_CLIENT_ID=${{ secrets.VITE_SSO_CLIENT_ID_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_API_PROXY_TARGET=${{ secrets.VITE_API_PROXY_TARGET_DEV_E2E }}" >> $GITHUB_ENV
#           fi

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-e2e
#           labels: ${{ steps.meta.outputs.labels }}
#           build-args: |
#             VITE_COMM_API_SAVEDATA_ENDPOINT_URL=${{ env.VITE_COMM_API_SAVEDATA_ENDPOINT_URL }}
#             VITE_COMM_API_GENERATE_ENDPOINT_URL=${{ env.VITE_COMM_API_GENERATE_ENDPOINT_URL }}
#             VITE_COMM_API_EDIT_ENDPOINT_URL=${{ env.VITE_COMM_API_EDIT_ENDPOINT_URL }}
#             VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL=${{ env.VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL }}
#             VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL=${{ env.VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL }}
#             VITE_COMM_API_UNLOCK_ICM_FORM_URL=${{ env.VITE_COMM_API_UNLOCK_ICM_FORM_URL }}
#             VITE_TEMPLATE_REPO_URL=${{ env.VITE_TEMPLATE_REPO_URL }}
#             VITE_KLAMM_URL=${{ env.VITE_KLAMM_URL }}
#             VITE_SSO_REDIRECT_URI=${{ env.VITE_SSO_REDIRECT_URI }}
#             VITE_SSO_AUTH_SERVER_URL=${{ env.VITE_SSO_AUTH_SERVER_URL }}
#             VITE_SSO_REALM=${{ env.VITE_SSO_REALM }}
#             VITE_SSO_CLIENT_ID=${{ env.VITE_SSO_CLIENT_ID }}
#             VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL=${{ env.VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL }}
#             VITE_API_PROXY_TARGET=${{ env.VITE_API_PROXY_TARGET }}

#     outputs:
#       image_tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-e2e

#   test_e2e:
#     runs-on: ubuntu-latest
#     needs: build_for_e2e

#     steps:
#       - name: Checkout the repository
#         uses: actions/checkout@v4

#       - name: Set up Docker
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Pull built image
#         run: |
#           docker pull ${{ needs.build_for_e2e.outputs.image_tag }}

#       - name: Run container
#         run: |
#           docker run -d --name kiln -p 8080:8080 ${{ needs.build_for_e2e.outputs.image_tag }}
      
#       - name: Wait for frontend 
#         uses: nick-fields/retry@v2
#         with:
#           timeout_seconds: 60
#           max_attempts: 10
#           command: |
#             curl -f http://localhost:8080 && \
#             curl -f http://localhost:8080/preview

#       - name: Install Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'

#       - name: Install dependencies
#         run: npm ci

#       - name: Install Playwright browsers
#         run: npx playwright install --with-deps

#       - name: Run Playwright tests
#         run: npx playwright test
  
#   build_and_push:
#     runs-on: ubuntu-latest
#     needs: test_e2e

#     steps:
#       - name: Checkout the repository
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Extract metadata for Docker
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
#       - name: Export secrets based on environment
#         run: |
#           if [[ "${GITHUB_REF##*/}" == "main" ]]; then
#             echo "VITE_COMM_API_SAVEDATA_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_GENERATE_ENDPOINT_URL=${{ secrets.VITE_COMM_API_GENERATE_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_EDIT_ENDPOINT_URL=${{ secrets.VITE_COMM_API_EDIT_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_UNLOCK_ICM_FORM_URL=${{ secrets.VITE_COMM_API_UNLOCK_ICM_FORM_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_TEMPLATE_REPO_URL=${{ secrets.VITE_TEMPLATE_REPO_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_KLAMM_URL=${{ secrets.VITE_KLAMM_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REDIRECT_URI=${{ secrets.VITE_SSO_REDIRECT_URI_PROD }}" >> $GITHUB_ENV
#             echo "VITE_SSO_AUTH_SERVER_URL=${{ secrets.VITE_SSO_AUTH_SERVER_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REALM=${{ secrets.VITE_SSO_REALM_PROD }}" >> $GITHUB_ENV
#             echo "VITE_SSO_CLIENT_ID=${{ secrets.VITE_SSO_CLIENT_ID_PROD }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL_PROD }}" >> $GITHUB_ENV
#             echo "VITE_API_PROXY_TARGET=${{ secrets.VITE_API_PROXY_TARGET_PROD }}" >> $GITHUB_ENV

#           elif [[ "${GITHUB_REF##*/}" == "test" ]]; then
#             echo "VITE_COMM_API_SAVEDATA_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_GENERATE_ENDPOINT_URL=${{ secrets.VITE_COMM_API_GENERATE_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_EDIT_ENDPOINT_URL=${{ secrets.VITE_COMM_API_EDIT_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_UNLOCK_ICM_FORM_URL=${{ secrets.VITE_COMM_API_UNLOCK_ICM_FORM_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_TEMPLATE_REPO_URL=${{ secrets.VITE_TEMPLATE_REPO_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_KLAMM_URL=${{ secrets.VITE_KLAMM_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REDIRECT_URI=${{ secrets.VITE_SSO_REDIRECT_URI_TEST }}" >> $GITHUB_ENV
#             echo "VITE_SSO_AUTH_SERVER_URL=${{ secrets.VITE_SSO_AUTH_SERVER_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REALM=${{ secrets.VITE_SSO_REALM_TEST }}" >> $GITHUB_ENV
#             echo "VITE_SSO_CLIENT_ID=${{ secrets.VITE_SSO_CLIENT_ID_TEST }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL_TEST }}" >> $GITHUB_ENV
#             echo "VITE_API_PROXY_TARGET=${{ secrets.VITE_API_PROXY_TARGET_TEST }}" >> $GITHUB_ENV

#           else
#             echo "VITE_COMM_API_SAVEDATA_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_GENERATE_ENDPOINT_URL=${{ secrets.VITE_COMM_API_GENERATE_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_EDIT_ENDPOINT_URL=${{ secrets.VITE_COMM_API_EDIT_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_UNLOCK_ICM_FORM_URL=${{ secrets.VITE_COMM_API_UNLOCK_ICM_FORM_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_TEMPLATE_REPO_URL=${{ secrets.VITE_TEMPLATE_REPO_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_KLAMM_URL=${{ secrets.VITE_KLAMM_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REDIRECT_URI=${{ secrets.VITE_SSO_REDIRECT_URI_DEV }}" >> $GITHUB_ENV
#             echo "VITE_SSO_AUTH_SERVER_URL=${{ secrets.VITE_SSO_AUTH_SERVER_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_SSO_REALM=${{ secrets.VITE_SSO_REALM_DEV }}" >> $GITHUB_ENV
#             echo "VITE_SSO_CLIENT_ID=${{ secrets.VITE_SSO_CLIENT_ID_DEV }}" >> $GITHUB_ENV
#             echo "VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL=${{ secrets.VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL_DEV }}" >> $GITHUB_ENV
#             echo "VITE_API_PROXY_TARGET=${{ secrets.VITE_API_PROXY_TARGET_DEV }}" >> $GITHUB_ENV
#           fi

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
#           labels: ${{ steps.meta.outputs.labels }}
#           build-args: |
#             VITE_COMM_API_SAVEDATA_ENDPOINT_URL=${{ env.VITE_COMM_API_SAVEDATA_ENDPOINT_URL }}
#             VITE_COMM_API_GENERATE_ENDPOINT_URL=${{ env.VITE_COMM_API_GENERATE_ENDPOINT_URL }}
#             VITE_COMM_API_EDIT_ENDPOINT_URL=${{ env.VITE_COMM_API_EDIT_ENDPOINT_URL }}
#             VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL=${{ env.VITE_COMM_API_SAVEDATA_ICM_ENDPOINT_URL }}
#             VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL=${{ env.VITE_COMM_API_LOADDATA_ICM_ENDPOINT_URL }}
#             VITE_COMM_API_UNLOCK_ICM_FORM_URL=${{ env.VITE_COMM_API_UNLOCK_ICM_FORM_URL }}
#             VITE_TEMPLATE_REPO_URL=${{ env.VITE_TEMPLATE_REPO_URL }}
#             VITE_KLAMM_URL=${{ env.VITE_KLAMM_URL }}
#             VITE_SSO_REDIRECT_URI=${{ env.VITE_SSO_REDIRECT_URI }}
#             VITE_SSO_AUTH_SERVER_URL=${{ env.VITE_SSO_AUTH_SERVER_URL }}
#             VITE_SSO_REALM=${{ env.VITE_SSO_REALM }}
#             VITE_SSO_CLIENT_ID=${{ env.VITE_SSO_CLIENT_ID }}
#             VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL=${{ env.VITE_COMM_API_LOADSAVEDJSON_ENDPOINT_URL }}
#             VITE_API_PROXY_TARGET=${{ env.VITE_API_PROXY_TARGET }}

#     outputs:
#       image_tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build_and_push

#     steps:
#       - name: Checkout the repository
#         uses: actions/checkout@v4

#       - name: Install oc CLI
#         uses: redhat-actions/oc-installer@v1

#       - name: Authenticate with OpenShift
#         uses: redhat-actions/oc-login@v1
#         with:
#           openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
#           namespace: ${{ github.ref == 'refs/heads/main' && secrets.OPENSHIFT_PROD_NAMESPACE || (github.ref == 'refs/heads/dev' && secrets.OPENSHIFT_DEV_NAMESPACE) || secrets.OPENSHIFT_TEST_NAMESPACE }}
#           openshift_token: ${{ github.ref == 'refs/heads/main' && secrets.OPENSHIFT_PROD_TOKEN || (github.ref == 'refs/heads/dev' && secrets.OPENSHIFT_DEV_TOKEN) || secrets.OPENSHIFT_TEST_TOKEN }}
#           insecure_skip_tls_verify: true

#       - name: Deploy with Helm
#         run: |
#           helm upgrade --install kiln ./helm --set image.tag=${{ needs.build_and_push.outputs.image_tag }}

#       - name: Trigger OpenShift Rollout
#         run: |
#          oc rollout restart deployment/kiln    
